/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	clientset "github.com/aws/amazon-sagemaker-operator-for-k8s/pkg/client/clientset/versioned"
	batchtransformjobv1 "github.com/aws/amazon-sagemaker-operator-for-k8s/pkg/client/clientset/versioned/typed/batchtransformjob/v1"
	fakebatchtransformjobv1 "github.com/aws/amazon-sagemaker-operator-for-k8s/pkg/client/clientset/versioned/typed/batchtransformjob/v1/fake"
	endpointconfigv1 "github.com/aws/amazon-sagemaker-operator-for-k8s/pkg/client/clientset/versioned/typed/endpointconfig/v1"
	fakeendpointconfigv1 "github.com/aws/amazon-sagemaker-operator-for-k8s/pkg/client/clientset/versioned/typed/endpointconfig/v1/fake"
	hostingdeploymentv1 "github.com/aws/amazon-sagemaker-operator-for-k8s/pkg/client/clientset/versioned/typed/hostingdeployment/v1"
	fakehostingdeploymentv1 "github.com/aws/amazon-sagemaker-operator-for-k8s/pkg/client/clientset/versioned/typed/hostingdeployment/v1/fake"
	hyperparametertuningjobv1 "github.com/aws/amazon-sagemaker-operator-for-k8s/pkg/client/clientset/versioned/typed/hyperparametertuningjob/v1"
	fakehyperparametertuningjobv1 "github.com/aws/amazon-sagemaker-operator-for-k8s/pkg/client/clientset/versioned/typed/hyperparametertuningjob/v1/fake"
	modelv1 "github.com/aws/amazon-sagemaker-operator-for-k8s/pkg/client/clientset/versioned/typed/model/v1"
	fakemodelv1 "github.com/aws/amazon-sagemaker-operator-for-k8s/pkg/client/clientset/versioned/typed/model/v1/fake"
	trainingjobv1 "github.com/aws/amazon-sagemaker-operator-for-k8s/pkg/client/clientset/versioned/typed/trainingjob/v1"
	faketrainingjobv1 "github.com/aws/amazon-sagemaker-operator-for-k8s/pkg/client/clientset/versioned/typed/trainingjob/v1/fake"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/discovery"
	fakediscovery "k8s.io/client-go/discovery/fake"
	"k8s.io/client-go/testing"
)

// NewSimpleClientset returns a clientset that will respond with the provided objects.
// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
// without applying any validations and/or defaults. It shouldn't be considered a replacement
// for a real clientset and is mostly useful in simple unit tests.
func NewSimpleClientset(objects ...runtime.Object) *Clientset {
	o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
	for _, obj := range objects {
		if err := o.Add(obj); err != nil {
			panic(err)
		}
	}

	cs := &Clientset{}
	cs.discovery = &fakediscovery.FakeDiscovery{Fake: &cs.Fake}
	cs.AddReactor("*", "*", testing.ObjectReaction(o))
	cs.AddWatchReactor("*", func(action testing.Action) (handled bool, ret watch.Interface, err error) {
		gvr := action.GetResource()
		ns := action.GetNamespace()
		watch, err := o.Watch(gvr, ns)
		if err != nil {
			return false, nil, err
		}
		return true, watch, nil
	})

	return cs
}

// Clientset implements clientset.Interface. Meant to be embedded into a
// struct to get a default implementation. This makes faking out just the method
// you want to test easier.
type Clientset struct {
	testing.Fake
	discovery *fakediscovery.FakeDiscovery
}

func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

var _ clientset.Interface = &Clientset{}

// BatchtransformjobV1 retrieves the BatchtransformjobV1Client
func (c *Clientset) BatchtransformjobV1() batchtransformjobv1.BatchtransformjobV1Interface {
	return &fakebatchtransformjobv1.FakeBatchtransformjobV1{Fake: &c.Fake}
}

// EndpointconfigV1 retrieves the EndpointconfigV1Client
func (c *Clientset) EndpointconfigV1() endpointconfigv1.EndpointconfigV1Interface {
	return &fakeendpointconfigv1.FakeEndpointconfigV1{Fake: &c.Fake}
}

// HostingdeploymentV1 retrieves the HostingdeploymentV1Client
func (c *Clientset) HostingdeploymentV1() hostingdeploymentv1.HostingdeploymentV1Interface {
	return &fakehostingdeploymentv1.FakeHostingdeploymentV1{Fake: &c.Fake}
}

// HyperparametertuningjobV1 retrieves the HyperparametertuningjobV1Client
func (c *Clientset) HyperparametertuningjobV1() hyperparametertuningjobv1.HyperparametertuningjobV1Interface {
	return &fakehyperparametertuningjobv1.FakeHyperparametertuningjobV1{Fake: &c.Fake}
}

// ModelV1 retrieves the ModelV1Client
func (c *Clientset) ModelV1() modelv1.ModelV1Interface {
	return &fakemodelv1.FakeModelV1{Fake: &c.Fake}
}

// TrainingjobV1 retrieves the TrainingjobV1Client
func (c *Clientset) TrainingjobV1() trainingjobv1.TrainingjobV1Interface {
	return &faketrainingjobv1.FakeTrainingjobV1{Fake: &c.Fake}
}
