/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package internalversion

import (
	v1 "github.com/aws/amazon-sagemaker-operator-for-k8s/api/hyperparametertuningjob/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HyperparameterTuningJobLister helps list HyperparameterTuningJobs.
type HyperparameterTuningJobLister interface {
	// List lists all HyperparameterTuningJobs in the indexer.
	List(selector labels.Selector) (ret []*v1.HyperparameterTuningJob, err error)
	// HyperparameterTuningJobs returns an object that can list and get HyperparameterTuningJobs.
	HyperparameterTuningJobs(namespace string) HyperparameterTuningJobNamespaceLister
	HyperparameterTuningJobListerExpansion
}

// hyperparameterTuningJobLister implements the HyperparameterTuningJobLister interface.
type hyperparameterTuningJobLister struct {
	indexer cache.Indexer
}

// NewHyperparameterTuningJobLister returns a new HyperparameterTuningJobLister.
func NewHyperparameterTuningJobLister(indexer cache.Indexer) HyperparameterTuningJobLister {
	return &hyperparameterTuningJobLister{indexer: indexer}
}

// List lists all HyperparameterTuningJobs in the indexer.
func (s *hyperparameterTuningJobLister) List(selector labels.Selector) (ret []*v1.HyperparameterTuningJob, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.HyperparameterTuningJob))
	})
	return ret, err
}

// HyperparameterTuningJobs returns an object that can list and get HyperparameterTuningJobs.
func (s *hyperparameterTuningJobLister) HyperparameterTuningJobs(namespace string) HyperparameterTuningJobNamespaceLister {
	return hyperparameterTuningJobNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HyperparameterTuningJobNamespaceLister helps list and get HyperparameterTuningJobs.
type HyperparameterTuningJobNamespaceLister interface {
	// List lists all HyperparameterTuningJobs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.HyperparameterTuningJob, err error)
	// Get retrieves the HyperparameterTuningJob from the indexer for a given namespace and name.
	Get(name string) (*v1.HyperparameterTuningJob, error)
	HyperparameterTuningJobNamespaceListerExpansion
}

// hyperparameterTuningJobNamespaceLister implements the HyperparameterTuningJobNamespaceLister
// interface.
type hyperparameterTuningJobNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HyperparameterTuningJobs in the indexer for a given namespace.
func (s hyperparameterTuningJobNamespaceLister) List(selector labels.Selector) (ret []*v1.HyperparameterTuningJob, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.HyperparameterTuningJob))
	})
	return ret, err
}

// Get retrieves the HyperparameterTuningJob from the indexer for a given namespace and name.
func (s hyperparameterTuningJobNamespaceLister) Get(name string) (*v1.HyperparameterTuningJob, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("hyperparametertuningjob"), name)
	}
	return obj.(*v1.HyperparameterTuningJob), nil
}
